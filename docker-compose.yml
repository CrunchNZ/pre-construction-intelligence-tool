version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: precon_postgres
    environment:
      POSTGRES_DB: preconstruction_intelligence
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - precon_network

  # Redis for Celery and Caching
  redis:
    image: redis:7-alpine
    container_name: precon_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - precon_network

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: precon_backend
    environment:
      - DEBUG=True
      - DB_HOST=postgres
      - DB_NAME=preconstruction_intelligence
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - REDIS_HOST=redis
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_static:/app/staticfiles
      - backend_media:/app/media
    depends_on:
      - postgres
      - redis
    networks:
      - precon_network
    command: >
      sh -c "python manage.py migrate &&
              python manage.py collectstatic --noinput &&
              python manage.py runserver 0.0.0.0:8000"

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: precon_celery_worker
    environment:
      - DEBUG=True
      - DB_HOST=postgres
      - DB_NAME=preconstruction_intelligence
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - REDIS_HOST=redis
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - precon_network
    command: celery -A preconstruction_intelligence worker -l info

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: precon_celery_beat
    environment:
      - DEBUG=True
      - DB_HOST=postgres
      - DB_NAME=preconstruction_intelligence
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - REDIS_HOST=redis
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - precon_network
    command: celery -A preconstruction_intelligence beat -l info

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: precon_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
    depends_on:
      - backend
    networks:
      - precon_network
    command: npm start

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: precon_nginx
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - backend
      - frontend
    networks:
      - precon_network

volumes:
  postgres_data:
  redis_data:
  backend_static:
  backend_media:

networks:
  precon_network:
    driver: bridge
